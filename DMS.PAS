{
 c:\system\menu\dms e:\system\menu\mainmenu.dms Main 1 temp1.bat temp2.bat
}
PROGRAM DosMenuSystem;
{$A-}{$B-}{D-}{$E+}{$F-}{G-}{$I-}{$K-}{$L-}{$N-}{$P-}{$Q-}{$R-}{$S-}{$T-}{$V-}{$W-}{$Y-}

USES Useful,CText,Dos;


{***** Constants *****}
CONST
	Version  = 1.6;
	Year		= 1995;
	MaxOpts	= 50;
	MaxLabels= 1000;
	MaxLogins= 100;
	ColFile	= 'colors.dms';
	WinFile	= 'windows.dms';
	DayNames : ARRAY [0..6] OF String = ('SUN','MON','TUE','WED','THU','FRI','SAT');
	PageMove = 8;

	LoginsSys= 'logins.sys';
	UsersSys = 'users.sys';
	AccessSys= 'access.sys';

{***** Token Types *****}
CONST	StringToken		= 0;
		LabelToken		= 1;
		UnknownToken	= 2;
		EndOfFileToken = 3;

{***** Menu Type *****}
TYPE
	DirectoryType	= ARRAY [1..1000] OF SearchRec;
	ZipFileListType= ARRAY [1..1000] OF String[8];
	LabelListType	= ARRAY [1..MaxLabels] OF String[56];
	UserType 		= RECORD
								UserName : String[8];
								Password : String[12];
						  END;
	LoginsType		= ARRAY [0..MaxLogins] OF UserType;
	MenuType			= RECORD
								LabelName	: String;
								NumOpts 		: Integer;
								OptionText	: ARRAY [1..MaxOpts] OF String[56];
                                                                								User			: ARRAY [1..MaxOpts] OF String[8];
								ActionString: ARRAY [1..MaxOpts] OF String[128];
								ActionType	: ARRAY [1..MaxOpts] OF Integer;
								Description	: ARRAY [1..MaxOpts,1..11] OF String[56];
						  END;

{***** File Types *****}
TYPE
	TextFile	= File OF Byte;

{***** Global Variables *****}
VAR
	Menu				: MenuType;
	MenuFile 		: String;
	MenuLabel		: String;
	RunMenu 			: String;
	LogFile			: String;
	CurrentFile1 	: String;
	CurrentFile2 	: String;
	DMSFile 			: File OF MenuType;
	CurrentOption	: Integer;
	ExitFlag			: Boolean;

{***** Write Help *****}
PROCEDURE WriteHelp;
BEGIN
	WriteLn;
	WriteLn('Dos Menu System v '+MakeVerStr(Version)+'  -  By Mattias Gustavsson '+MakeStr(Year));
	WriteLn;
	WriteLn('  SYNTAX: ');
	WriteLn('     dms path\exefile dmcfile label option runfile1 runfile2 [logfile]');
	WriteLn('  EX: ');
	WriteLn('     dms d:\menu\dms.exe mainmenu.dmc Main 1 temp1.bat temp2.bat menu.log');
	Halt(0);
END;

{***** Text Output Routines *****}
	{$I C:\MENU\DMS\DMS_TEXT.PAS}

{***** File Reading Routines *****}
	{$I C:\MENU\DMS\DMS_FILE.PAS}

{***** Menu Editing Routines *****}
	{$I C:\MENU\DMS\DMS_EDIT.PAS}

{***** Crypt Routines *****}
	{$I C:\MENU\DMS\DMS_CRYP.PAS}

{***** WriteString *****}
PROCEDURE WriteString(VAR Fi:TextFile; St:string);
VAR
	a : Integer;
	b : Byte;
BEGIN
	St:=St+chr(13)+Chr(10);
	FOR a:=1 to Length(St) DO BEGIN
		b:=Ord(St[a]);
		Write(Fi,b);
	END;
END;

{***** Write Log *****}
PROCEDURE WriteLog(Message:String);
VAR
	Fi : TextFile;
	Year,Month,Day,DayOfWeek,
	Hour,Minute,Second,Sec100	: Word;
	Date,Time	: String;
BEGIN
	IF LogFile='' THEN
		Exit;
	Assign(Fi,LogFile);
	Reset(Fi);
	IF IOResult<>0 THEN BEGIN
		Rewrite(Fi);
		WriteString(Fi,'rem This file is automatically generated.');
		WriteString(Fi,'rem Please do not change anything.');
	END;
	Seek(Fi,FileSize(Fi));
	GetDate(Year,Month,Day,DayOfWeek);
	Date:=Copy(MakeStr(Year),3,2);
	IF Length(MakeStr(Month))<2 THEN
		Date:=Date+'0';
	Date:=Date+MakeStr(Month);
	IF Length(MakeStr(Day))<2 THEN
		Date:=Date+'0';
	Date:=Date+MakeStr(Day)+' '+DayNames[DayOfWeek];
	GetTime(Hour,Minute,Second,Sec100);
	Time:=MakeStr(Hour);
	IF Length(Time)<2 THEN
		Time:='0'+Time;
	Time:=Time+':';
	IF Length(MakeStr(Minute))<2 THEN
		Time:=Time+'0';
	Time:=Time+MakeStr(Minute)+':';
	IF Length(MakeStr(Second))<2 THEN
		Time:=Time+'0';
	Time:=Time+MakeStr(Second);
	WriteString(Fi,Date+' '+Time+' '+Message);
	Close(Fi);
END;

{***** Write BAT *****}
PROCEDURE WriteBAT(Drive,Path,Prog:String);
VAR
	Fi : TextFile;
BEGIN
	Assign(Fi,CurrentFile1);Rewrite(Fi);
	WriteString(Fi,'@echo off');
	WriteString(Fi,'rem This file is automatically generated.');
	WriteString(Fi,'rem Please do not change anything.');
	WriteString(Fi,Drive);
	WriteString(Fi,'chdir '+Path);
	WriteString(Fi,'call '+Prog);
	WriteString(Fi,GetDrive(RunMenu));
	WriteString(Fi,'chdir '+GetPath(RunMenu));
	WriteString(Fi,GetProg(RunMenu)+' '+RunMenu+' '+MenuFile+' '+
						MenuLabel+' '+MakeStr(CurrentOption)+' '+
						CurrentFile1+' '+CurrentFile2+' '+LogFile);
	WriteString(Fi,CurrentFile2);
	Close(Fi);
END;


{***** Write EXE *****}
PROCEDURE WriteEXE(Drive,Path,Prog:String);
VAR
	Fi : TextFile;
BEGIN
	Assign(Fi,CurrentFile1);Rewrite(Fi);
	WriteString(Fi,'@echo off');
	WriteString(Fi,'rem This file is automatically generated.');
	WriteString(Fi,'rem Please do not change anything.');
	WriteString(Fi,Drive);
	WriteString(Fi,'chdir '+Path);
	WriteString(Fi,Prog);
	WriteString(Fi,GetDrive(RunMenu));
	WriteString(Fi,'chdir '+GetPath(RunMenu));
	WriteString(Fi,GetProg(RunMenu)+' '+RunMenu+' '+MenuFile+' '+
						MenuLabel+' '+MakeStr(CurrentOption)+' '+
						CurrentFile1+' '+CurrentFile2+' '+LogFile);
	WriteString(Fi,CurrentFile2);
	Close(Fi);
END;

{***** Write ZIP *****}
PROCEDURE WriteZIP(Drive,Path,Prog:String);
VAR
	Fi : TextFile;
BEGIN
	Assign(Fi,CurrentFile1);Rewrite(Fi);
	WriteString(Fi,'@echo off');
	WriteString(Fi,'rem This file is automatically generated.');
	WriteString(Fi,'rem Please do not change anything.');
	WriteString(Fi,'echo Depacking. Please wait.');
	WriteString(Fi,GetDrive(RunMenu));
	WriteString(Fi,'chdir '+GetPath(RunMenu));
	WriteString(Fi,'mkdir dmstmp');
	WriteString(Fi,'chdir dmstmp');
	IF Path[Length(Path)]<>'\' THEN Path:=Path+'\';
	WriteString(Fi,'..\unzip -d -o '+Drive+Path+Prog+' > zipdump');
	WriteString(Fi,'call dmsrun.bat');
	WriteString(Fi,'..\zip -t '+Drive+Path+Prog+' *.* > zipdump');
	WriteString(Fi,GetDrive(RunMenu));
	WriteString(Fi,'chdir '+GetPath(RunMenu));
	WriteString(Fi,'deltree /y dmstmp');
	WriteString(Fi,GetProg(RunMenu)+' '+RunMenu+' '+MenuFile+' '+
						MenuLabel+' '+MakeStr(CurrentOption)+' '+
						CurrentFile1+' '+CurrentFile2+' '+LogFile);
	WriteString(Fi,CurrentFile2);
	Close(Fi);
END;

{***** Exit Menu *****}
PROCEDURE ExitMenu;
VAR
	Fi : TextFile;
BEGIN
	WriteLog('Exit from menu');
	Assign(Fi,CurrentFile1);Rewrite(Fi);
	WriteString(Fi,'@echo off');
	WriteString(Fi,'rem This file is automatically generated.');
	WriteString(Fi,'rem Please do not change anything.');
	WriteString(Fi,GetDrive(RunMenu));
	WriteString(Fi,'chdir \');
	Close(Fi);
	ExitFlag:=True;
END;
{***** Change User *****}
PROCEDURE ChangeUser;
BEGIN
	Menu.User[CurrentOption]:='Mattias';
END;

{***** EditText *****}
PROCEDURE EditText;
BEGIN
END;

{***** Cursor Up *****}
PROCEDURE CursorUp;
BEGIN
	IF CurrentOption>1 THEN
		Dec(CurrentOption)
	ELSE
		CurrentOption:=Menu.NumOpts;
	DrawOptions(CurrentOption);
	DrawDescription(CurrentOption);
END;

{***** Cursor Down *****}
PROCEDURE CursorDown;
BEGIN
	IF CurrentOption<Menu.NumOpts THEN
		Inc(CurrentOption)
	ELSE
		CurrentOption:=1;
	DrawOptions(CurrentOption);
	DrawDescription(CurrentOption);
END;

{***** Page Up *****}
PROCEDURE PageUp;
BEGIN
	CurrentOption:=CurrentOption-PageMove;
	IF CurrentOption<1 THEN
		CurrentOption:=Menu.NumOpts+CurrentOption;
	IF CurrentOption<1 THEN
		CurrentOption:=1;
	IF CurrentOption>Menu.NumOpts THEN
		CurrentOption:=Menu.NumOpts;
	DrawOptions(CurrentOption);
	DrawDescription(CurrentOption);
END;

{***** Page Down *****}
PROCEDURE PageDown;
BEGIN
	CurrentOption:=CurrentOption+PageMove;
	IF CurrentOption>Menu.NumOpts THEN
		CurrentOption:=CurrentOption-Menu.NumOpts;
	IF CurrentOption<1 THEN
		CurrentOption:=1;
	IF CurrentOption>Menu.NumOpts THEN
		CurrentOption:=Menu.NumOpts;
	DrawOptions(CurrentOption);
	DrawDescription(CurrentOption);
END;

{***** Top *****}
PROCEDURE Top;
BEGIN
	CurrentOption:=1;
	DrawOptions(CurrentOption);
	DrawDescription(CurrentOption);
END;

{***** Bottom *****}
PROCEDURE Bottom;
BEGIN
	CurrentOption:=Menu.NumOpts;
	DrawOptions(CurrentOption);
	DrawDescription(CurrentOption);
END;

{***** Select Option *****}
PROCEDURE SelectOption;
CONST
	Insert	= 82;
	Delete	= 83;
	F1			= 59;
	F8			= 66;
	F10		= 68;
	Enter		= 13;
	Space		= 32;
	CursUp	= 72;
	CursDwn	= 80;
	PgUp		= 73;
	PgDwn		= 81;
	Home		= 71;
	EndKey	= 79;
	CtrlX		= 24;
	Esc		= 27;
VAR
	Key : Word;
	ActionFlag	: Boolean;
BEGIN
	ActionFlag:=False;
	REPEAT
		{***** Read Keyboard *****}
		Key:=GetKey AND $ff;
		IF Key>0 THEN
			CASE Key OF
				{** Edit Menu **}
				Insert	: AddOption;			{ INSERT  }
				Delete	: DelOption;			{ DELETE  }
				{** Menu control **}
				Enter		: ActionFlag:=True;	{ ENTER	 }
				Space		: ActionFlag:=True;	{ SPACE	 }
				CursUp	: CursorUp;				{ CURSUP	 }
				CursDwn	: CursorDown;			{ CURSDWN }
				PgUp		: PageUp;				{ PAGEUP	 }
				PgDwn		: PageDown;				{ PAGEDWN }
				Home		: Top;					{ HOME	 }
				EndKey	: Bottom;				{ END 	 }
				CtrlX		: ExitMenu;				{ CTRL+X	 }
			END;

(*		{***** Read Joystick *****}
		IF Jup(JoyV) THEN	BEGIN		{ JOYUP	 }
			CursorUp;
			Delay(100);
		END;
		IF JDown(JoyV) THEN BEGIN	{ JOYDWN	 }
			CursorDown;
			Delay(100);
		END;
		IF Fire THEN BEGIN			{ FIRE	 }
			ActionFlag:=True;
			Delay(100);
		END;
*)	UNTIL ActionFlag OR ExitFlag;
END;

{***** ReadLogins *****}
FUNCTION ReadLogins(VAR Logins:LoginsType):Integer;
VAR
	i	: Integer;
	Fi	: File OF UserType;
BEGIN
	Assign(Fi,LoginsSys);
	Reset(Fi);
	i:=1;
	REPEAT
		Read(Fi,Logins[i]);
		Inc(i);
	UNTIL Eof(Fi) OR (i>MaxLogins);
	Dec(i);
	Close(Fi);
END;

{***** ReadUserPwd *****}
FUNCTION ReadUserPwd(UserName:String):String;
VAR
	User 	: UserType;
	Fi		: File OF UserType;
BEGIN
	Assign(Fi,UsersSys);
	Reset(Fi);
	REPEAT
		Read(Fi,User);
	UNTIL Eof(Fi) OR (User.UserName=UserName);
	IF User.UserName=UserName THEN
		ReadUserPwd:=User.Password
	ELSE
		ReadUserPwd:='';
	Close(Fi);
END;

{***** GetPwd *****}
FUNCTION GetPwd(UserName:String; Num:Integer; List:LoginsType):String;
VAR
	i	: Integer;
BEGIN
	FOR i:=1 TO Num DO
		IF List[i].UserName=UserName THEN BEGIN
			GetPwd:=List[i].Password;
			Exit;
		END;
END;

{***** SearchAccessFiles *****}
FUNCTION SearchAccessFiles(UserName:String):Boolean;
BEGIN
	SearchAccessFiles:=False;
END;

{***** PasswordOk *****}
FUNCTION PasswordOk(UnCrypted,Crypted:String):Boolean;
BEGIN
	IF EnCryptString(UnCrypted,UnCrypted)=Crypted THEN
		PasswordOk:=True
	ELSE
		PasswordOk:=False;
END;

{***** InputUserName *****}
FUNCTION InputUserName:String;
VAR
	Key	: Byte;
	s		: String;
BEGIN
	s:='';
	DrawLoginUserCurs(0);
	REPEAT
		Key:=GetAscii;
		IF (Key>31) AND (Length(s)<8) THEN BEGIN
			s:=s+Chr(Key);
			DrawLoginUserChar(Length(s),Chr(Key));
		END;
		IF Key=8 THEN BEGIN
			DrawLoginUserChar(Length(s),' ');
			s:=Copy(s,1,Length(s)-1);
			DrawLoginUserCurs(Length(s));
		END;
	UNTIL Key=13;
	InputUserName:=String(s);
	DrawLoginUserClear;
END;

{***** InputPassword *****}
FUNCTION InputPassword:String;
VAR
	Key	: Byte;
	s		: String;
BEGIN
	s:='';
	DrawLoginPassCurs(0);
	REPEAT
		Key:=GetAscii;
		IF (Key>31) AND (Length(s)<8) THEN BEGIN
			s:=s+Chr(Key);
			DrawLoginPassChar(Length(s),'*');
		END;
		IF Key=8 THEN BEGIN
			DrawLoginPassChar(Length(s),' ');
			s:=Copy(s,1,Length(s)-1);
			DrawLoginPassCurs(Length(s));
		END;
	UNTIL Key=13;
	InputPassword:=String(s);
	DrawLoginPassClear;
	DrawDescription(CurrentOption);
END;

{***** PasswordQuery *****}
PROCEDURE PasswordQuery(VAR UserName,Password:String);
BEGIN
	DrawPasswordQuery;
	UserName:=InputUserName;
	Password:=InputPassword;
END;

{***** WriteLogin *****}
PROCEDURE WriteLogin(UserName,Password:String);
VAR
	User:UserType;
	Fi		: File OF UserType;
BEGIN
	Assign(Fi,LoginsSys);
	Reset(Fi);
	Seek(Fi,FileSize(Fi));
	User.UserName:=UserName;
	User.Password:=Password;
	Write(Fi,User);
	Close(Fi);
END;
{***** Check Password *****}
FUNCTION CheckPassword:Boolean;
VAR
	NumLogins: Integer;
	Logins	: LoginsType;
	UserName : String[8];
	Password,
	WantedPwd: String[12];
	Again,
	PwdCorr	: Boolean;
BEGIN
	REPEAT
		Again:=False;
		PwdCorr:=False;
		NumLogins:=ReadLogins(Logins);
		WantedPwd:=ReadUserPwd(Menu.User[CurrentOption]);
		Password:=GetPwd(Menu.User[CurrentOption],NumLogins,Logins);
		IF PasswordOk(Password,WantedPwd) THEN
			PwdCorr:=True
		ELSE IF SearchAccessFiles(Menu.User[CurrentOption]) THEN
			PwdCorr:=True
		ELSE BEGIN
			PasswordQuery(UserName,Password);
			WantedPwd:=ReadUserPwd(UserName);
			IF PasswordOk(Password,WantedPwd) THEN
				WriteLogin(UserName,Password)
			ELSE
				{DrawAccess Denied};
			Again:=True;
		END;
	UNTIL Again=False;
	CheckPassword:=PwdCorr;
END;

{***** Perform Action *****}
PROCEDURE PerformAction;
BEGIN
	TextMode(Mode80x25);

	{*** None ***}
	IF (Menu.ActionType[CurrentOption]=LabelToken)
	AND (UStr(Menu.ActionString[CurrentOption])='NONE') THEN
		Exit;
	{*** Exit ***}
	IF (Menu.ActionType[CurrentOption]=LabelToken)
	AND (UStr(Menu.ActionString[CurrentOption])='EXIT') THEN BEGIN
		ExitMenu;
		Exit;
	END;
	{*** Submenu ***}
	IF (Menu.ActionType[CurrentOption]=LabelToken) THEN BEGIN
		DrawLoading;
		MenuLabel:=Menu.ActionString[CurrentOption];
		CurrentOption:=1;
		ReadDMS(MenuLabel);
		DrawOptions(CurrentOption);
		DrawDescription(CurrentOption);
		Exit;
	END;
	{*** DMS File ***}
	IF (Menu.ActionType[CurrentOption]=StringToken)
	AND (GetExtension(Menu.ActionString[CurrentOption])='DMS') THEN BEGIN
		Close(DMSFile);
		DrawLoading;
		MenuFile:=Menu.ActionString[CurrentOption];
		MenuLabel:='Main';
		CurrentOption:=1;
		OpenDMS(MenuFile);
		ReadDMS(MenuLabel);
		DrawOptions(CurrentOption);
		DrawDescription(CurrentOption);
		Exit;
	END;
	{*** ZIP File ***}
	IF (Menu.ActionType[CurrentOption]=StringToken)
	AND (GetExtension(Menu.ActionString[CurrentOption])='ZIP') THEN BEGIN
		Close(DMSFile);
		WriteZIP(GetDrive(Menu.ActionString[CurrentOption]),
					GetPath(Menu.ActionString[CurrentOption]),
					GetProg(Menu.ActionString[CurrentOption]));
		WriteLog(Menu.ActionString[CurrentOption]);
		ExitFlag:=True;
		Exit;
	END;

	{*** BAT File ***}
	IF (Menu.ActionType[CurrentOption]=StringToken)
	AND (GetExtension(Menu.ActionString[CurrentOption])='BAT') THEN BEGIN
		Close(DMSFile);
		WriteBAT(GetDrive(Menu.ActionString[CurrentOption]),
					GetPath(Menu.ActionString[CurrentOption]),
					GetProg(Menu.ActionString[CurrentOption]));
		WriteLog(Menu.ActionString[CurrentOption]);
		ExitFlag:=True;
		Exit;
	END;

	{*** EXE File ***}
	IF (Menu.ActionType[CurrentOption]=StringToken)
	AND (GetExtension(Menu.ActionString[CurrentOption])='EXE') THEN BEGIN
		Close(DMSFile);
		WriteEXE(GetDrive(Menu.ActionString[CurrentOption]),
					GetPath(Menu.ActionString[CurrentOption]),
					GetProg(Menu.ActionString[CurrentOption]));
		WriteLog(Menu.ActionString[CurrentOption]);
		ExitFlag:=True;
		Exit;
	END;

	{*** COM File ***}
	IF (Menu.ActionType[CurrentOption]=StringToken)
	AND (GetExtension(Menu.ActionString[CurrentOption])='COM') THEN BEGIN
		Close(DMSFile);
		WriteEXE(GetDrive(Menu.ActionString[CurrentOption]),
					GetPath(Menu.ActionString[CurrentOption]),
					GetProg(Menu.ActionString[CurrentOption]));
		WriteLog(Menu.ActionString[CurrentOption]);
		ExitFlag:=True;
		Exit;
	END;
END;

{***** Main Program *****}
VAR
	CFBuffer: String;
BEGIN
	{*** Check if help needed ***}
	IF (ParamCount<6) OR (ParamCount>7) THEN
		WriteHelp;

	{*** Initialize ***}
	ReadColors;						{ Reads Color definitions }
	ReadWindows;					{ Reads Window characters definitions }
	DefaultColors;
	DefaultWindows;
	RunMenu:=ParamStr(1);      { Get Parameters }
	MenuFile:=ParamStr(2);
	MenuLabel:=ParamStr(3);
	CurrentOption:=MakeVal(ParamStr(4));
	CurrentFile1:=ParamStr(5);
	CurrentFile2:=ParamStr(6);
	CFBuffer:=CurrentFile1;
	CurrentFile1:=CurrentFile2;
	CurrentFile2:=CFBuffer;
	IF ParamCount=7 THEN
		LogFile:=ParamStr(7)
	ELSE
		LogFile:='';

	{*** Load menu file ***}
	OpenDMS(MenuFile);
	ReadDMS(MenuLabel);

(*	{*** Check Option Setting ***}
	IF (CurrentOption<0) OR (CurrentOption>Menu.NumOpts) THEN
		WriteHelp;
*)
	{*** Write to log ***}
	WriteLog('Entering menu');

	{*** Draw Background***}
	DrawScreen;
	DrawOptions(CurrentOption);
	DrawDescription(CurrentOption);

	{*** Init Exitflag ***}
	ExitFlag:=False;

	{*** Main Loop ***}
	REPEAT
		SelectOption;
		IF NOT ExitFlag THEN
			PerformAction;
	UNTIL ExitFlag;

	{*** Draw Loading Screen ***}
	TextMode(Mode80x25);
	SetCursor(1,1);
	PrintXYA(1,1,'                                                                                ',Yellow,Red,BlinkOff);
	Centre(1,'Dos Menu System v '+MakeVerStr(Version));
	WriteLn;
	WriteLn;
END.
